This is a chat application that uses TCP sockets to connect to and from server, it accepts multiple clients even from the same ip for as long as the usernames are unique and do not violate the restrictions.
The main server thread waits until a client connects and then it creates a new handler object that listens to the sockets for incomming messages, depending on what command is used it responds following the protocol.
Once it finds out that the connected client is no longer connected or it receives a QUIT message, it sends a QUIT message back, closes both the inputstream and outputstream, the socket, updates the list of all the connected users and sends it out to all the remaining users.
The client implements a GUI that allows the user to first; use the JOIN command to open a socket and after waiting 1 second it sends the JOIN message to the server if the connection is open. Until you receive a J_OK from the server, the user can only use the JOIN command.
After the JOIN succeeds, the status of both the server and the client changes so that server knows, who to send messages to. The client now automatically adds "DATA <<username>>: " in front of the written text because there is only one other command that can be used, which is QUIT and that one gets recognised by the client and sent without the DATA prefix.
If the user closes the window, the client sends a QUIT message to the server and disconnects before all of the threads are terminated.
After the client receives a list, it creates a new object of the Name class for each of the names, it clears the observablelist that is created in the Controller class and adds all the objects into it so that the GUI can dynamically display them.
The server doesn't resend the message to the client that sent it to the server and also the client filters out messages that were repeated by the server.